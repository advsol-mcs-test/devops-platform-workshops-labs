#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-advsol-mcs-test-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-advsol-mcs-test-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-advsol-mcs-test-openshift201-may2019-prod"
def LOKI_SERVICE  = "loki"
def GRAFANA_SERVICE = 'grafana'
def PROMETHEUS_SERVICE = 'prometheus'

//Pipeline
node {
            stage ('Deploy to Dev') {
            parallel (
            'Deploy Loki to Dev': {
                dir ('loki_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/loki.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                            openshift.withProject("${DEV_NAMESPACE}") {
                                def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                                // this will wait until the desired replicas are available
                                dc.rollout().status()
                            }
                        }
                    }
                    //input message: 'Want to deploy to prod?', ok: 'SHIP-IT!'
                    //sh "oc process -f openshift201/templates/loki.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    //sh "echo Wait PROD for service to be up"
                    //timeout (time: 180, unit: 'SECONDS'){
                    //    openshift.withCluster() {
                    //        openshift.withProject("${PROD_NAMESPACE}") {
                    //            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                    //            // this will wait until the desired replicas are available
                    //            dc.rollout().status()
                    //        }
                    //    }
                    //}
                }
            },
            'Deploy grafana to Dev': {
                dir ('grafana_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/grafana.yaml -p NAMESPACE=${DEV_NAMESPACE} -p GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE} -p LOKI_SERVICE_NAME=${LOKI_SERVICE} -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p MEMORY_LIMIT=2Gi | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                            openshift.withProject("${DEV_NAMESPACE}") {
                                def dc = openshift.selector('deployment', "${GRAFANA_SERVICE}")
                                // this will wait until the desired replicas are available
                                dc.rollout().status()
                            }
                        }
                    }
                }
            },
            'Deploy Prometheus to Dev': {
                dir ('prometheus_pipeline') {
                    checkout scm
                    sh "oc process -f openshift201/templates/prometheus.yaml -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p PROMETHEUS_PVC_SIZE=2Gi -p NAMESPACE=${DEV_NAMESPACE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 180, unit: 'SECONDS'){
                        openshift.withCluster() {
                            openshift.withProject("${DEV_NAMESPACE}") {
                                def dc = openshift.selector('deployment', "${PROMETHEUS_SERVICE}")
                                // this will wait until the desired replicas are available
                                dc.rollout().status()
                            }
                        }
                    }
                }
            }
	)
	}
}
